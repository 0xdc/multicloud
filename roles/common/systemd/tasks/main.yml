  ## Systemd
  - name: set systemd hostname
    copy:
      content: "{{ ansible_hostname }}"
      dest: /etc/hostname

  # detect if systemd is installed
  - name: detect if systemd is installed
    shell: qlist -I sys-apps/systemd
    failed_when: False
    register: systemd

  - name: remove systemd-incompatible udev packages
    portage: state=absent package={{ item }}
    when: '"" == systemd.stdout'
    with_items:
    - sys-fs/udev
    - sys-fs/eudev
    - virtual/udev
    - virtual/dev-manager
    # Cannot use loop_control.loop_var as ansible does not pass
    # it down to the module

  - name: install systemd with -udev
    portage: package=sys-apps/systemd
    # Because we removed udev above, pciutils needs to be built
    # without udev support
    environment:
      USE: -udev

  - name: enable systemd (multi-user) services
    file:
      state: link
      src: /usr/lib/systemd/system/{{ item }}
      dest: /etc/systemd/system/multi-user.target.wants/{{ item }}
    with_items:
    - sshd.socket
    # systemd
    - systemd-networkd.socket
    - systemd-networkd.service
    - systemd-resolved.service
    - systemd-timesyncd.service

  - name: configure networkd ethernet devices
    copy:
      src: files/eth.network
      dest: /etc/systemd/network/eth.network

  - block:
    - name: detect if systemd is running
      shell: systemctl --no-pager
    rescue:
    - name: reboot into systemd
      shell: reboot
    # Server does not close SSH immediately
    - name: wait for server to go down
      pause: seconds=30
    - name: wait for server boot
      include: tasks/wait.yml
    always:
    - name: check for connectivity
      ping:
