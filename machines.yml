#!/usr/bin/env ansible-playbook
---
- hosts: localhost
  become: no
  tasks:

    - name: spin up
      include: tasks/replicas.yml
      with_dict: "{{ layout }}"
      loop_control:
        loop_var: "role"

  vars_files:
  - config/config.yml
  - config/layout.yml
  - config/vault.yml
  - config/{{ cloud_provider }}.yml

- hosts: all
  gather_facts: no
  tasks:
  - name: wait for server boot
    include: tasks/wait.yml
  vars_files:
  - config/config.yml
  - config/vault.yml

- hosts: all
  strategy: '{{ strategy | default("linear") }}'
  tasks:
  ## Firstboot
  - name: create repos.conf directory
    file:
      path: /etc/portage/repos.conf
      state: directory

  - name: create gentoo repos.conf
    template:
      src: templates/gentoo-repo.conf.j2
      dest: /etc/portage/repos.conf/gentoo.conf

  - name: make.conf binpkg
    template:
      src: templates/make.conf.j2
      dest: /etc/portage/make.conf

  # Reduce aggressiveness of syncing
  - name: check for portage tree
    stat:
      path: /usr/portage/metadata/timestamp
    register: timestamp

  - block:
    - name: sync the portage tree
      portage: sync=yes

    # I don't have a good non-destructive test for this perl upgrade
    # but this shell command detects and fixes it most of the time
    - name: update perl
      shell: '(qlist -IC "virtual/perl-*"; qlist -IC "dev-perl/*") | xargs emerge -1 dev-lang/perl'
      # just run it once, if we sync the tree
    when: timestamp.stat.exists is defined and not timestamp.stat.exists

  ## Profile
  - name: install git[-perl,-python]
    portage: package=dev-vcs/git state=present
    environment:
      USE: -perl -python

  - name: checkout overlay
    git:
      repo: https://github.com/0xdc/overlay
      dest: /usr/local/0xdc-overlay

  - block:
    - name: install overlay
      copy:
        src: /usr/local/0xdc-overlay/metadata/repos.conf
        dest: /etc/portage/repos.conf/0xdc.conf
        remote_src: True
      # XXX: The copy module errors in a python3-only environment
    rescue:
    - name: install overlay from local repos.conf
      copy:
        src: files/0xdc.conf
        dest: /etc/portage/repos.conf/0xdc.conf

  - name: set profile
    file:
      state: link
      src:  /usr/local/0xdc-overlay/profiles/amd64
      path: /etc/portage/make.profile
    # TODO: set according to (AMD64/ARM) architecture

  ## Bootloader (GRUB2)
  - name: configure grub
    copy:
      src: files/grub.default
      dest: /etc/default/grub
    register: grubdef_onchange

  - name: regenerate grub.cfg
    shell: grub-mkconfig -o /boot/grub/grub.cfg.new
    when: grubdef_onchange|changed
    register: grubcfg_regen

  - block:
    - name: update grub.cfg
      copy:
        src: /boot/grub/grub.cfg.new
        dest: /boot/grub/grub.cfg
        remote_src: True
      when: grubcfg_regen|changed
    rescue:
    - name: regenerate grub.cfg (overwrite)
      shell: grub-mkconfig -o /boot/grub/grub.cfg
    # This can leave the bootloader config in an incorrect state if
    # systemd tasks fail to install systemd

  ## Systemd
  - name: set systemd hostname
    copy:
      content: "{{ ansible_hostname }}"
      dest: /etc/hostname

  - block:
    - name: systemd keywords
      lineinfile:
        line: "{{ item }}"
        dest: /etc/portage/package.keywords/cloud
      with_items:
      - =sys-apps/systemd-233 ~amd64
      - =sys-libs/libseccomp-2.3.1 ~amd64
    rescue:
    - copy:
        src: systemd.keywords
        dest: /etc/portage/package.keywords/systemd

  # detect if systemd is installed
  - name: detect if systemd is installed
    shell: qlist -I sys-apps/systemd
    failed_when: False
    register: systemd

  - name: remove systemd-incompatible udev packages
    portage: state=absent package={{ item }}
    when: '"" == systemd.stdout'
    with_items:
    - sys-fs/udev
    - sys-fs/eudev
    - virtual/udev
    - virtual/dev-manager
    # Cannot use loop_control.loop_var as ansible does not pass
    # it down to the module

  - name: install systemd with -udev
    portage: package=sys-apps/systemd
    # Because we removed udev above, pciutils needs to be built
    # without udev support
    environment:
      USE: -udev

  - name: enable systemd (multi-user) services
    file:
      state: link
      src: /usr/lib/systemd/system/{{ item }}
      dest: /etc/systemd/system/multi-user.target.wants/{{ item }}
    with_items:
    - sshd.socket
    # systemd
    - systemd-networkd.socket
    - systemd-networkd.service
    - systemd-resolved.service
    - systemd-timesyncd.service

  - name: configure networkd ethernet devices
    copy:
      src: files/eth.network
      dest: /etc/systemd/network/eth.network

  vars_files:
  - config/config.yml
  - config/vault.yml

- hosts: all
  tasks:

  - block:
    - name: detect if systemd is running
      shell: systemctl --no-pager
    rescue:
    - name: reboot into systemd
      shell: reboot
    # Server does not close SSH immediately
    - name: wait for server to go down
      pause: seconds=30
    - name: wait for server boot
      include: tasks/wait.yml

  vars_files:
  - config/config.yml
  - config/vault.yml
