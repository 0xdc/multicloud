#!/usr/bin/env ansible-playbook
---
- hosts: localhost
  become: no
  tasks:

    - include: tasks/create.yml
      with_items: "{{ range(replicas) | list }}"
      loop_control:
        loop_var: "replica"

    - name: pause for server boot
      pause: seconds=30

  vars_files:
  - config/config.yml
  - config/vault.yml
  - config/{{ cloud_provider }}.yml

- hosts: all
  tasks:
  - name: set systemd hostname
    copy:
      content: "{{ server_hostname }}"
      dest: /etc/hostname

  # Reduce aggressiveness of syncing
  - name: check for previous run marker
    stat:
      path: /.ansible-sync
    register: syncmark

  - name: sync the portage tree
    portage: sync=yes
    when: syncmark.stat.exists is defined and not syncmark.stat.exists

  - name: update previous run marker
    file:
      path: /.ansible-sync
      state: touch

  # I don't have a good non-destructive test for this perl upgrade
  # but this shell command detects and fixes it most of the time
  - name: update perl
    shell: '(qlist -IC "virtual/perl-*"; qlist -IC "dev-perl/*") | xargs emerge -1 dev-lang/perl'
  # just run it once, if we sync the tree
    when: syncmark.stat.exists is defined and not syncmark.stat.exists
  # git, the next package, depends on perl rather heavily

  - name: install git
    portage: package=dev-vcs/git state=present

  - name: checkout overlay
    git:
      repo: https://github.com/0xdc/overlay
      dest: /usr/local/0xdc-overlay

  - name: create repos.conf directory
    file:
      path: /etc/portage/repos.conf
      state: directory

  - name: install overlay
    copy:
      src: /usr/local/0xdc-overlay/metadata/repos.conf
      dest: /etc/portage/repos.conf/0xdc.conf
      remote_src: True

  - name: set profile
    shell: eselect profile set 0xdc:amd64

  # detect if systemd is installed
  - name: detect if systemd is installed
    shell: qlist -I sys-apps/systemd
    failed_when: False
    register: systemd

  - name: remove systemd-incompatible udev packages
    portage: state=absent package={{ item }}
    when: '"" == systemd.stdout'
    with_items:
    - sys-fs/udev
    - sys-fs/eudev
    - virtual/udev
    - virtual/dev-manager
    # Cannot use loop_control.loop_var as ansible does not pass
    # it down to the module

  - name: install systemd with -udev
    portage: package=sys-apps/systemd
    # Because we removed udev above, pciutils needs to be built
    # without udev support
    environment:
      USE: -udev

  - name: configure grub
    copy:
      src: files/grub.default
      dest: /etc/default/grub
    register: grubdef_onchange

  - name: regenerate grub.cfg
    shell: grub-mkconfig -o /boot/grub/grub.cfg.new
    when: grubdef_onchange|changed

  - name: update grub.cfg
    copy:
      src: /boot/grub/grub.cfg.new
      dest: /boot/grub/grub.cfg
      remote_src: True
    register: grubcfg_onchange

  - name: enable systemd services
    file:
      state: link
      src: /usr/lib/systemd/system/{{ item }}
      dest: /etc/systemd/system/multi-user.target.wants/{{ item }}
    with_items:
    - sshd.socket
    - systemd-networkd.service
    - systemd-resolved.service
    - systemd-timesyncd.service

  - name: configure networkd ethernet devices
    copy:
      src: files/eth.network
      dest: /etc/systemd/network/eth.network

  - name: detect if systemd is running
    shell: systemctl --no-pager
    register: systemd
    ignore_errors: yes

  - name: reboot into systemd
    shell: reboot
    when: systemd|failed
